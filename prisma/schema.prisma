// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String     @id @default(uuid())
    name           String
    username       String     @unique
    email          String     @unique
    password_hash  String
    description    String?
    location       String?
    website        String?
    twitter        String?
    created_at     DateTime   @default(now())
    favorite_books String[]
    image_key      String?
    like           Like[]
    book_list      BookList[]
    read           Read[]
    progress       Progress[]

    @@map("users")
}

model Book {
    id           String    @id @default(uuid())
    title        String
    subtitle     String?
    authors      String[]
    publisher    String?
    publish_date DateTime?
    language     String?
    page_count   Int?
    description  String?
    image_key    String?

    books_on_list BooksOnBookLists[]
    like          Like[]
    read          Read[]
}

model BookList {
    id          String             @id @default(uuid())
    name        String
    description String?
    image_key   String?
    books       BooksOnBookLists[]
    user        User               @relation(fields: [user_id], references: [id])
    user_id     String
}

model BooksOnBookLists {
    id           String   @id @default(uuid())
    book         Book     @relation(fields: [book_id], references: [id])
    book_id      String
    book_list    BookList @relation(fields: [book_list_id], references: [id])
    book_list_id String
}

enum ReadStatus {
    ACTIVE
    FINISHED
    CANCELLED
    DELETED
}

model Read {
    id                String     @id @default(uuid())
    start_date        DateTime   @default(now())
    end_date          DateTime?
    status            ReadStatus @default(ACTIVE)
    is_private        Boolean    @default(false)
    review_rating     Float?
    review_content    String?
    review_is_spoiler Boolean?
    user              User       @relation(fields: [user_id], references: [id])
    user_id           String
    book              Book       @relation(fields: [book_id], references: [id])
    book_id           String
    progress          Progress[]
}

model Progress {
    id          String   @id @default(uuid())
    description String?
    is_spoiler  Boolean
    page        Int?
    percentage  Float?
    created_at  DateTime @default(now())
    read        Read     @relation(fields: [read_id], references: [id])
    read_id     String
    user        User     @relation(fields: [user_id], references: [id])
    user_id     String
}

model Like {
    id      String @id @default(uuid())
    user    User   @relation(fields: [user_id], references: [id])
    user_id String
    book    Book   @relation(fields: [book_id], references: [id])
    book_id String

    @@unique([user_id, book_id])
    @@map("likes")
}
