// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String     @id @default(uuid())
    name          String
    username      String
    email         String     @unique
    password_hash String
    created_at    DateTime   @default(now())
    review        Review[]
    like          Like[]
    bookList      BookList[]
    read          Read[]

    @@map("users")
}

model Book {
    id          String    @id @default(uuid())
    title       String
    subtitle    String?
    authors     String[]
    publisher   String?
    publishDate DateTime?
    language    String?
    pageCount   Int?
    description String?

    reviews    Review[]
    bookList   BookList? @relation(fields: [bookListId], references: [id])
    bookListId String?
    like       Like[]
    read       Read[]
}

model Read {
    id        String     @id @default(uuid())
    startDate DateTime   @default(now())
    endDate   DateTime?
    user      User       @relation(fields: [userId], references: [id])
    userId    String
    book      Book       @relation(fields: [bookId], references: [id])
    bookId    String
    progress  Progress[]
}

model Progress {
    id          String   @id @default(uuid())
    description String?
    isSpoiler   Boolean
    page        Int?
    percentage  Float?
    createdAt   DateTime @default(now())
    read        Read     @relation(fields: [readId], references: [id])
    readId      String
}

model Review {
    id      String @id @default(uuid())
    content String
    rating  Float
    user    User   @relation(fields: [userId], references: [id])
    userId  String
    book    Book   @relation(fields: [bookId], references: [id])
    bookId  String
}

model Like {
    id     String @id @default(uuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String
    book   Book   @relation(fields: [bookId], references: [id])
    bookId String
}

model BookList {
    id     String @id @default(uuid())
    name   String
    books  Book[]
    user   User   @relation(fields: [userId], references: [id])
    userId String
}
