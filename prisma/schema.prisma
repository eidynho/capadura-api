// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(uuid())
    name          String
    username      String         @unique
    email         String         @unique
    password_hash String
    description   String?
    location      String?
    website       String?
    twitter       String?
    created_at    DateTime       @default(now())
    image_key     String?
    like          Like[]
    book_list     BookList[]
    read          Read[]
    progress      Progress[]
    favorite_book FavoriteBook[]
    user_activity UserActivity[]
    followers     Follow[]       @relation("following")
    following     Follow[]       @relation("follower")

    @@map("users")
}

model Follow {
    follower     User   @relation("follower", fields: [follower_id], references: [id])
    follower_id  String
    following    User   @relation("following", fields: [following_id], references: [id])
    following_id String

    @@id([follower_id, following_id])
    @@map("follows")
}

model Book {
    id           String    @id @default(uuid())
    title        String
    subtitle     String?
    authors      String[]
    publisher    String?
    publish_date DateTime?
    language     String?
    page_count   Int?
    description  String?
    image_key    String?

    books_on_list BooksOnBookLists[]
    like          Like[]
    read          Read[]
    favorite_book FavoriteBook[]
    user_activity UserActivity[]

    @@map("books")
}

model FavoriteBook {
    id         String   @id @default(uuid())
    order      Int
    updated_at DateTime @updatedAt
    book       Book     @relation(fields: [book_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    book_id    String
    user       User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    user_id    String

    @@map("favorite_books")
}

enum ActivityType {
    LIKE_BOOK
    START_READ
    PAUSE_READ
    RESUME_READ
    ADD_BOOK_PROGRESS
    ADD_BOOK_REVIEW
}

model UserActivity {
    id            String       @id @default(uuid())
    activity      String?
    activity_type ActivityType
    created_at    DateTime     @default(now())
    book          Book?        @relation(fields: [book_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    book_id       String?
    user          User         @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    user_id       String

    @@map("user_activities")
}

model BookList {
    id          String             @id @default(uuid())
    name        String
    description String?
    image_key   String?
    books       BooksOnBookLists[]
    user        User               @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    user_id     String

    @@map("book_lists")
}

model BooksOnBookLists {
    id           String   @id @default(uuid())
    book         Book     @relation(fields: [book_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    book_id      String
    book_list    BookList @relation(fields: [book_list_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    book_list_id String

    @@map("books_on_book_lists")
}

enum ReadStatus {
    ACTIVE
    FINISHED
    CANCELLED
    DELETED
}

model Read {
    id                String     @id @default(uuid())
    start_date        DateTime   @default(now())
    end_date          DateTime?
    status            ReadStatus @default(ACTIVE)
    is_private        Boolean    @default(false)
    review_rating     Float?
    review_content    String?
    review_is_spoiler Boolean?
    user              User       @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    user_id           String
    book              Book       @relation(fields: [book_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    book_id           String
    progress          Progress[]

    @@map("reads")
}

model Progress {
    id          String   @id @default(uuid())
    description String?
    is_spoiler  Boolean
    page        Int?
    percentage  Float?
    created_at  DateTime @default(now())
    read        Read     @relation(fields: [read_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    read_id     String
    user        User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    user_id     String

    @@map("progress")
}

model Like {
    id      String @id @default(uuid())
    user    User   @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    user_id String
    book    Book   @relation(fields: [book_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    book_id String

    @@unique([user_id, book_id])
    @@map("likes")
}
